
namespace RPG_API.Combate.Daño{
    public abstract class Daño : iAtaque{

		public float getDaño(String tipo){
			switch (tipo){
				case "golpe": return golpe();
				case "corte": return corte();
				case "clavar": return clavar();

    			case "magiaBlanca": return magiaBlanca();
				case "magiaPura": return magiaPura();
				case "magiaOscura": return magiaOscura();

				case "viento": return viento();
				case "agua": return agua();
				case "tierra": return tierra();

				case "fuego": return fuego();
				case "hielo": return hielo();
				case "electricidad": return electricidad();
				default: return otros(tipo);
			}
		}

		protected virtual float otros(String tipo){return 0.0;}

 		public float golpe(){return 0.0;}
		public float corte(){return 0.0;}
		public float clavar(){return 0.0;}

    	public float magiaBlanca(){return 0.0;}
		public float magiaPura(){return 0.0;}
		public float magiaOscura(){return 0.0;}

		public float viento(){return 0.0;}
		public float agua(){return 0.0;}
		public float tierra(){return 0.0;}

		public float fuego(){return 0.0;}
		public float hielo(){return 0.0;}
		public float electricidad(){return 0.0;}

		public float caos(){return 0.0;}

		//los template method salvando las papas
		public float remanente(iIntercambioCombate atenuado);
		public float descontar(iIntercambioCombate descuento);

		protected float restante(float num){ return 1 - num; }

		public iIntercambioDañoCombate copia();

		public String[] getTipos(){ 
			return {"golpe", "corte", "clavar", "magiaBlanca", "magiaPura", "magiaOscura",
					"viento", "agua", "tierra", "fuego", "hielo", "electricidad", "caos" };
		}
    }

	public class DañoAlterado: Daño{
    	private float veneno;
    	private float sangrado;
    	private float maldicion;

		public DañoAlterado(float veneno,float sangrado,float maldicion){
			this.veneno = veneno,
			this.sangrado = sangrado;
			this.maldicion = maldicion;
		}

    	public float veneno(){return veneno;}
    	public float sangrado(){return sangrado;}
    	public float maldicion(){return maldicion;}

		public float remanente(iIntercambioCombate atenuado){
			float recibido = veneno()*atenuado.veneno() + sangrado()*atenuado.sangrado() + maldicion()*atenuado.maldicion();

			this.veneno = veneno()*restante(atenuado.veneno());
			this.sangrado = sangrado()*restante(atenuado.sangrado());
			this.maldicion = maldicion()*restante(atenuado.maldicion());

			return recibido;
		}

		public Daño copia(){	return new DañoAlterado(veneno(),sangrado(),maldicion()); }	
    }
	
    public class DañoAlteradoElemental: Daño{
		private float humedad;
		private float quemaduras;
		private float paralisis;

		public DañoAlteradoElemental(float humedad,float quemaduras,float paralisis){
			this.humedad = humedad;
			this.quemaduras = quemaduras;
			this.paralisis = paralisis;
		}

		public float humedad(){return humedad;}
		public float quemaduras(){return quemaduras;}
		public float paralisis(){return paralisis;}

		public float remanente(iIntercambioCombate atenuado){
			float recibido = humedad()*atenuado.humedad() + quemaduras()*atenuado.quemaduras() + paralisis()*atenuado.paralisis();

			this.humedad = humedad()*restante(atenuado.humedad());
			this.quemaduras = quemaduras()*restante(atenuado.quemaduras());
			this.paralisis = paralisis()*restante(atenuado.paralisis());

			return recibido;
		}
		public Daño copia(){	return new DañoAlterado(humedad(),quemaduras(),paralisis()); }
    }

    public class DañoCaos: Daño{
    	private float caos;

		public DañoCaos(float caos){
			this.caos = caos;
		}

    	public float caos(){return caos;}

		public float remanente(iIntercambioCombate atenuado){
			return 0.0;
		}

		public Daño copia(){	return new DañoCaos(caos()); }
    }

	public class DañoCombinado : Daño{
    	public DañoCombinado nodo, hoja;

    	public DañoCombinado( Daño interno ){
    		this.nodo = interno;
    	}
    	
    	//Por favor, no metas el mismo dañoMixto aqui, reventara
    	public void add(Daño daño){
			if( hoja==null)
				hoja = new DañoCombinado(daño);
			else
				hoja.add(daño);
    	}

		public Daño copia(){
			DañoCombinado nuevo = new DañoCombinado(nodo);
			if( hoja == null )
				nuevo.hoja = null;
			else
				nuevo.hoja = this.hoja.copia();
			return this.build();
		 }
    	
 		private float buscador(String nombre){
 			float total = this.nodo.getTipo(nombre);
 			if( hoja != null )
				total += hoja.getTipo(nombre);
    		return total;
   		}
		
		public float golpe(){ return this.buscador("golpe"); }
		public float corte(){ return this.buscador("corte"); }
		public float clavar(){  return this.buscador("clavar"); }

    	public float magiaBlanca(){ return this.buscador("magiaBlanca"); }
		public float magiaPura(){   return this.buscador("magiaPura"); }
		public float magiaOscura(){   return this.buscador("magiaOscura"); }

		public float viento(){ return this.buscador("viento"); }
		public float agua(){ return this.buscador("agua"); }
		public float tierra(){ return this.buscador("tierra"); }

		public float fuego(){ return this.buscador("fuego"); }
		public float hielo(){ return this.buscador("hielo"); }
 		public float electricidad(){ return this.buscador("electricidad"); }
 	
		public float caos(){  return this.buscador("caos"); }

    	public float remanente(iIntercambioCombate atenuado){
    		float total = 0.0;
    		foreach(Daño daño in this.getTipo())
    			total += daño.remanente(atenuado);

			return total;
		}
    }    

	public class DañoElemental: Daño{
		private float fuego;
		private float hielo;
		private float electricidad;

		public DañoElemental(float fuego,float hielo,float electricidad){
			this.fuego = fuego;
			this.hielo = hielo;
			this.electricidad = electricidad;
		}

		public float fuego(){return fuego;}
		public float hielo(){return hielo;}
		public float electricidad(){return electricidad;}

		public float remanente(iIntercambioCombate atenuado){
			float recibido = fuego()*atenuado.fuego() + hielo()*atenuado.hielo() + electricidad()*atenuado.electricidad();
			this.fuego = fuego()*restante(atenuado.fuego());
			this.hielo = hielo()*restante(atenuado.hielo());
			this.electricidad = electricidad()*restante(atenuado.electricidad());

			return recibido;
		}

		public Daño copia(){	return new DañoElemental(fuego(),hielo(),electricidad()); }	
    }

	public class DañoElementalBasico: Daño{
		private float viento;
		private float agua;
		private float tierra;

		public float viento(){return viento;}
		public float agua(){return agua;}
		public float tierra(){return tierra;}

		public DañoElementalBasico(float viento,float agua ,float tierra){
			this.viento = viento;
			this.agua = agua;
			this.tierra = tierra;
		}

		public float remanente(iIntercambioCombate atenuado){
			float recibido = viento()*atenuado.viento() + agua()*atenuado.agua() + tierra()*atenuado.tierra();
			this.viento = viento()*restante(atenuado.viento());
			this.agua = agua()*restante(atenuado.agua());
			this.tierra = tierra()*restante(atenuado.tierra());

			return recibido;
		}		

		public Daño copia(){	return new DañoElementalBasico(viento(),agua(),tierra()); }	
    }

	public class DañoFisico : Daño{
 		private float golpe;
		private float corte;
		private float clavar;

		public DañoFisico(float golpe,float corte,float clavar){
			this.golpe = golpe,
			this.corte = corte;
			this.clavar = clavar;
		}

 		public float golpe(){return golpe;}
		public float corte(){return corte;}
		public float clavar(){return clavar;}

		public float remanente(iIntercambioCombate atenuado){
			float recibido = golpe()*atenuado.golpe() + corte()*atenuado.corte() + clavar()*atenuado.clavar();
			this.golpe = golpe()*restante(atenuado.golpe());
			this.corte = corte()*restante(atenuado.corte());
			this.clavar = clavar()*restante(atenuado.clavar());

			return recibido;
		}

        public float descontar(iIntercambioCombate descuento){
			float recibido = 0.0;
			
			this.golpe = golpe() - atenuado.golpe();
			recibido = (golpe()>=0)? atenuado.golpe():-golpe();
			this.golpe = min( golpe(), 0);

			
			fail();//mucha paja de seguir

			return recibido;
		}

		public Daño copia(){	return new DañoFisico(golpe(),corte(),clavar()); }	
    }
	
	public class DañoBuilder{
    	private DañoCombinado acumulacion;

    	public DañoCombinado(){
    		this.acumulacion = new DañoCombinado(new DañoFisico(0,0,0));
    	}
    	
        protected bool nulos(float f1,float f2,float f3){
            return f1<0f || f2<0f || f3<0f;
        }

        protected bool condicion(float f1,float f2,float f3){ return !nulos(float f1,float f2,float f3) };

		public DañoBuilder addDañoIndividual(String tipo,float valor){
			switch (tipo){
				case "golpe": { this.agregarFisico(valor,0,0); break;};
				case "corte": { this.agregarFisico(0,valor,0); break;};
				case "clavar": { this.agregarFisico(0,0,valor); break;};

    			case "magiaBlanca": { this.agregarMagia(valor,0,0); break;};
				case "magiaPura": { this.agregarMagia(0,valor,0); break;};
				case "magiaOscura": { this.agregarMagia(0,0,valor); break;};

				case "viento": { this.agregarElementalBasico(valor,0,0); break;};
				case "agua": { this.agregarElementalBasico(0,valor,0); break;};
				case "tierra": { this.agregarElementalBasico(0,0,valor); break;};

				case "fuego": { this.agregarElemental(valor,0,0); break;};
				case "hielo": { this.agregarElemental(0,valor,0); break;};
				case "electricidad": { this.agregarElemental(0,0,valor); break;};
				default: return otros(tipo);
			}
			return this;
		}

		protected virtual float setotros(String tipo){}

    	public DañoBuilder agregarFisico(float golpe,float corte,float clavar){
            if( condicion(golpe,corte,clavar) )
    		    this.acumulacion.add( new DañoFisico(golpe,corte,clavar) );
    		return this;
    	}

    	public DañoBuilder agregarMagia(float mBlanca,float mPura,float mOscura){
            if( condicion(mBlanca,mPura,mOscura) )
    		    this.acumulacion.add( new DañoMagico(mBlanca,mPura,mOscura));
    		return this;
    	}

    	public DañoBuilder agregarCaos(float caos){
            if( condicion(caos,caos,caos) )
    		    this.acumulacion.add( new DañoCaos(caos));
    		return this;
    	}

    	public DañoBuilder agregarElemental(float fuego,float hielo,float electricidad){
            if( condicion(fuego,hielo,electricidad) )
    		    this.acumulacion.add( new DañoElemental(fuego,hielo,electricidad));
    		return this;
    	}

    	public DañoBuilder agregarElementalBasico(float viento,float agua,float tierra){
    		 if( condicion(viento,agua,tierra) )
                this.acumulacion.add( new DañoElementalBasico(viento,agua,tierra) );
    		return this;
    	}

    	//Por favor, no metas el mismo dañoMixto aqui, reventara
    	public DañoBuilder agregarDaño(Daño daño){
    		this.acumulacion.add( daño );
    		return this;
    	}

    	public Daño build(){
    		DañoCombinado nuevo = new DañoCombinado();
    		nuevo.agregarFisico(golpe(),corte(),clavar())
    			.agregarElementalBasico(viento(),agua(),tierra())
    			.agregarElemental(fuego(),hielo(),electricidad())
    			.agregarCaos(caos())
    			.agregarMagia(magiaBlanca(),magiaPura(),magiaOscura())
    			.agregarAlterados(veneno(),sangrado(),maldicion())
    			.agregarElementalAlterados(humedad(),quemaduras(),paralisis());
    		return nuevo;
    	}

		public Daño copia(){	return this.build(); }
    	
 		public float golpe(){   return acumulacion.golpe(); } 
		public float corte(){  return acumulacion.corte(); } 
		public float clavar(){ return acumulacion.clavar(); } 

    	public float magiaBlanca(){ return acumulacion.magiaBlanca(); } 
		public float magiaPura(){ return acumulacion.magiaPura(); } 
        public float magiaOscura(){ return acumulacion.magiaOscura(); } 

		public float viento(){ return acumulacion.viento(); } 
		public float agua(){ return acumulacion.agua(); } 
		public float tierra(){ return acumulacion.tierra(); } 

		public float fuego(){ return acumulacion.fuego(); } 
		public float hielo(){ return acumulacion.hielo(); } 
		public float electricidad(){ return acumulacion.electricidad(); } 

		public float caos(){  return acumulacion.caos(); } 


    	public float remanente(iIntercambioCombate atenuado){
    		float total = 0.0;
    		foreach(Daño daño in acumulacion)
    			total = daño.remanente(atenuado);

			return total;
		}
    }    
 }


